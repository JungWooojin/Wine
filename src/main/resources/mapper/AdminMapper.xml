<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.winey.admin.AdminMapper">
    <insert id="insProduct" parameterType="ProductInsDto" useGeneratedKeys="true" keyProperty="productId">
        INSERT INTO t_product
        SET
        category_id = #{categoryId},
        feature_id = #{featureId},
        country_id = #{countryId},
        nm_kor = #{nmKor},
        nm_eng = #{nmEng},
        price = #{price},
        pic = #{pic},
        promotion = #{promotion},
        beginner = #{beginner},
        alcohol = #{alcohol},
        quantity = #{quantity}
    </insert>

    <insert id="insFeature" parameterType="ProductInsDto" useGeneratedKeys="true" keyProperty="featureId">
        INSERT INTO t_feature
        SET
        sweety = #{sweety},
        acidity = #{acidity},
        body = #{body}
    </insert>

    <insert id="insAroma">
        INSERT INTO t_aroma
        SET
        product_id = #{productId},
        aroma_category_id = #{aromaCategoryId}
    </insert>

    <delete id="delAroma">
        DELETE FROM t_aroma
        WHERE product_id = #{productId}
    </delete>

    <insert id="insSale" parameterType="ProductInsDto">
        INSERT INTO t_sale
        SET
        product_id = #{productId},
        sale = #{sale},
        sale_price = #{salePrice},
        start_sale = #{startSale},
        end_sale = #{endSale}
    </insert>

    <insert id="insWinePairing" parameterType="ProductInsDto">
        INSERT INTO t_wine_pairing
        SET
        product_id = #{productId},
        small_category_id = #{smallCategoryId}
    </insert>

    <update id="updProduct" parameterType="ProductUpdDto">
        UPDATE t_product
        SET
        category_id = #{categoryId},
        feature_id = #{featureId},
        country_id = #{countryId},
        nm_kor = #{nmKor},
        nm_eng = #{nmEng},
        price = #{price},
        <if test="pic != null">
            pic = #{pic},
        </if>
        promotion = #{promotion},
        beginner = #{beginner},
        alcohol = #{alcohol},
        quantity = #{quantity},
        updated_at = CURRENT_TIMESTAMP()

        WHERE product_id = #{productId}
    </update>

    <update id="updFeature" parameterType="ProductUpdDto">
        UPDATE t_feature
        SET
        sweety = #{sweety},
        acidity = #{acidity},
        body = #{body}
        WHERE feature_id = #{featureId}
    </update>

    <update id="updAroma" parameterType="ProductAromaDto">
        UPDATE t_aroma
        SET
        flower = #{flower},
        plant = #{plant},
        fruit = #{fruit},
        spicy = #{spicy},
        earth = #{earth},
        oak = #{oak},
        nuts = #{nuts}

        WHERE product_id = #{productId}
    </update>

    <update id="updSale" parameterType="ProductUpdDto">
        UPDATE t_sale
        SET
        product_id = #{productId},
        sale = #{sale},
        sale_price = #{salePrice},
        start_sale = #{startSale},
        end_sale = #{endSale},
        sale_yn = #{saleYn}

        WHERE product_id = #{productId}
    </update>

    <update id="delWinePairing" parameterType="ProductUpdDto">
        DELETE FROM t_wine_pairing
        WHERE product_id = #{productId}
    </update>

    <select id="selProductFk" resultType="ProductUpdDto">
        SELECT category_id categoryId, feature_id featureId, country_id countryId
        FROM t_product
        WHERE product_id = #{productId}
    </select>

    <select id="selProduct" resultType="ProductVo">
        SELECT A.product_id productId, A.nm_kor nmKor, A.price, A.promotion, A.beginner, A.quantity, B.sale, B.sale_price salePrice
        FROM t_product A
        LEFT OUTER JOIN t_sale B
        ON A.product_id = B.product_id
        LIMIT #{startIdx}, #{row}
    </select>
<!--
    <select id="selProduct" resultType="ProductVo">
        SELECT product_id productId, nm_kor nmKor, price, promotion, beginner, quantity
        FROM t_product
        LIMIT #{startIdx}, #{row}
    </select>
-->
    <select id="selProductSale" resultType="ProductSaleVo">
        SELECT A.product_id productId, A.nm_kor nmKor, A.price, B.sale, B.sale_price salePrice, A.promotion, A.beginner, A.quantity, B.sale_yn saleYn
        FROM t_product A
        INNER JOIN t_sale B
        ON A.product_id = B.product_id
        LIMIT #{startIdx}, #{row}
    </select>

    <select id="selUserList" resultType="UserVo">
        SELECT user_id userId, email, nm, region_nm_id regionNmId
        FROM t_user
        WHERE role = "ROLE_USER"
        LIMIT #{startIdx}, #{row}
    </select>

    <select id="selUserOrder" resultType="UserOrderDetailVo">
        SELECT B.order_id orderId, DATE_FORMAT(B.order_date, '%y-%m-%d') orderDate,
        D.nm_kor nmKor, B.total_order_price price, E.nm storeNm, B.order_status orderStatus
        , COUNT(*) count
        FROM t_user A
        INNER JOIN t_order B
        ON A.user_id = B.user_id
        INNER JOIN t_order_detail C
        ON B.order_id = C.order_id
        INNER JOIN t_product D
        ON C.product_id = D.product_id
        INNER JOIN t_store E
        ON B.store_id = E.store_id
        WHERE A.user_id = #{userId}
        GROUP BY B.order_id
        LIMIT #{startIdx}, #{row}
    </select>

    <select id="selOrder" resultType="OrderListVo">
        SELECT A.order_id orderId, DATE_FORMAT(A.order_date, '%y-%m-%d') orderDate , B.email, E.nm_kor nmKor, SUM(D.sale_price) salePrice, SUM(D.quantity) quantity, A.total_order_price totalPrice
        , A.payment, C.nm pickUpStore, A.order_status orderStatus, COUNT(*) count
        FROM t_order A
        INNER JOIN t_user B
        ON A.user_id = B.user_id
        INNER JOIN t_store C
        ON A.store_id = C.store_id
        INNER JOIN t_order_detail D
        ON A.order_id = D.order_id
        INNER JOIN t_product E
        ON D.product_id = E.product_id
        GROUP BY A.order_id
        LIMIT #{startIdx}, #{row}
    </select>

    <select id="selOrderDetail1" resultType="OrderDetail1">
        SELECT A.order_id orderId, DATE_FORMAT(A.order_date, '%y-%m-%d') orderDate, C.email, D.nm_kor nmKor, B.sale_price salePrice, B.quantity
        FROM t_order A
        INNER JOIN t_order_detail B
        ON A.order_id = B.order_id
        INNER JOIN t_user C
        ON A.user_id = C.user_id
        INNER JOIN t_product D
        ON B.product_id = D.product_id
        WHERE A.order_id = #{orderId}
    </select>

    <select id="selOrderDetail2" resultType="OrderDetail2">
        SELECT  SUM(B.quantity) quantity, SUM(B.sale_price) salePrice, A.total_order_price totalPrice,
        A.payment, E.nm storeNm, DATE_FORMAT(A.pickup_time, '%y-%m-%d') pickUpDate, DATE_FORMAT(A.pickup_time, '%H:%i') pickUpTime, A.order_status orderStatus
        FROM t_order A
        INNER JOIN t_order_detail B
        ON A.order_id = B.order_id
        INNER JOIN t_store E
        ON A.store_id = E.store_id
        WHERE A.order_id = #{orderId}
    </select>

    <!-- 미사용 -->
    <select id="selOrderDetail" resultType="OrderDetailVo">
        SELECT A.order_id orderId, DATE_FORMAT(A.order_date, '%y-%m-%d') orderDate, C.email, D.nm_kor nmKor, B.sale_price salePrice, B.quantity, A.total_order_price totalPrice,
        A.payment, E.nm storeNm, DATE_FORMAT(A.pickup_time, '%y-%m-%d') pickUpDate, DATE_FORMAT(A.pickup_time, '%H:%i') pickUpTime, A.order_status orderStatus
        FROM t_order A
        INNER JOIN t_order_detail B
        ON A.order_id = B.order_id
        INNER JOIN t_user C
        ON A.user_id = C.user_id
        INNER JOIN t_product D
        ON B.product_id = D.product_id
        INNER JOIN t_store E
        ON A.store_id = E.store_id
        WHERE A.order_id = #{orderId}
    </select>

    <select id="selOrderRefund" resultType="OrderRefundVo">
        SELECT refund_id refundId, order_id orderId, refund_reason refundReason, refund_yn refundYn, refund_date refundDate
        FROM t_order_refund
        LIMIT #{startIdx}, #{row}
    </select>

    <select id="selOrderRefundById" resultType="OrderRefundVo">
        SELECT B.refund_id refundId, A.order_id orderId, B.refund_reason refundReason, B.refund_yn refundYn, B.refund_date refundDate
        FROM t_order A
        INNER JOIN t_order_refund B
        ON A.order_id = B.order_id
        WHERE user_id = #{userId}
    </select>

    <insert id="insStore" parameterType="StoreInsDto" useGeneratedKeys="true" keyProperty="storeId">
        INSERT INTO t_store
        SET
        region_nm_id = #{regionNmId},
        nm = #{nm},
        tel = #{tel}
    </insert>

    <select id="selStore">
        SELECT store_id storeId, region_nm_id regionNmId, nm, tel
        FROM t_store
        LIMIT #{startIdx}, #{row}
    </select>

    <update id="updStore" parameterType="StoreInsDto">
        UPDATE t_store
        SET
        region_nm_id = #{regionNmId},
        nm = #{nm},
        tel = #{tel},
        updated_at = CURRENT_TIMESTAMP
        WHERE store_id = #{storeId}
    </update>

    <delete id="delStore">
        DELETE FROM t_store
        WHERE store_id = #{storeId}
    </delete>

    <update id="updOrderStatus" parameterType="OrderStatusDto">
        UPDATE t_order
        SET
        order_status = #{orderStatus}
        WHERE order_id = #{orderId}
    </update>

    <update id="updSaleYnOn">
        UPDATE t_sale
        SET
        sale_yn = 1
        WHERE start_sale = #{startSale}
    </update>

    <update id="updSaleYnOff">
        UPDATE t_sale
        SET
        sale_yn = 0
        WHERE end_sale = #{endSale}
    </update>

    <update id="updSaleYn" parameterType="ProductSaleYnDto">
        UPDATE t_sale
        SET
        sale_yn = #{saleYn}

        WHERE product_id = #{productId}
    </update>

    <update id="updDelYn">
        update t_user
        set
        del_yn = 1
        where user_id = #{userId}
    </update>

    <select id="productCount">
        SELECT COUNT(product_id)
        FROM t_product
    </select>

    <select id="productSaleCount">
        SELECT COUNT(sale_id)
        FROM t_sale
        WHERE sale_yn = 1
    </select>

    <select id="userCount">
        SELECT COUNT(user_id)
        FROM t_user
        WHERE role = 'ROLE_USER'
    </select>

    <select id="userOrderCount">
        SELECT COUNT(F.count)
        FROM
        (
        SELECT COUNT(*) count
        FROM t_user A
        INNER JOIN t_order B
        ON A.user_id = B.user_id
        INNER JOIN t_order_detail C
        ON B.order_id = C.order_id
        INNER JOIN t_product D
        ON C.product_id = D.product_id
        INNER JOIN t_store E
        ON B.store_id = E.store_id
        WHERE A.user_id = #{userId}
        GROUP BY B.order_id
        ) F
    </select>

    <select id="selUserInfo">
        SELECT user_id userId, email, nm
        FROM t_user
        WHERE user_id = #{userId}
    </select>

    <select id="orderCount">
        SELECT COUNT(F.count) count
        FROM
        (
        SELECT COUNT(*) count
        FROM t_order A
        INNER JOIN t_user B
        ON A.user_id = B.user_id
        INNER JOIN t_store C
        ON A.store_id = C.store_id
        INNER JOIN t_order_detail D
        ON A.order_id = D.order_id
        INNER JOIN t_product E
        ON D.product_id = E.product_id
        GROUP BY A.order_id
        ) F
    </select>

    <select id="storeCount">
        SELECT COUNT(store_id) count
        FROM t_store
    </select>




</mapper>